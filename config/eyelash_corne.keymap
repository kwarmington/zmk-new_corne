#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    combos {
        compatible = "zmk,combos";

        semcol {
            bindings = <&kp SEMI>;
            key-positions = <38 39>;
            timeout-ms = <50>;
            layers = <0>;
        };

        cpslck {
            bindings = <&kp CAPSLOCK>;
            key-positions = <28 41>;
            layers = <0>;
        };

        parentheses_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        parentheses_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <23 24>;
            layers = <0>;
        };

        bracket_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
            layers = <0>;
        };

        bracket_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <24 25>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <15 16>;
            layers = <0>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <32 31>;
            layers = <0>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            layers = <0>;
        };

        bigger_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <9 10>;
            layers = <0>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <32 37>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <4 8>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 23>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <30 31>;
            layers = <0>;
        };

        astrsk {
            bindings = <&kp ASTERISK>;
            key-positions = <3 9>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 24>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <31 38>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <18 22>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <33 36>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <25 26>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 15>;
            layers = <0>;
        };
    };

    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB       &kp Q  &kp W  &kp E      &kp R        &kp T                           &kp UP                &kp Y          &kp U        &kp I            &kp O    &kp P     &kp DELETE
&kp LEFT_ALT  &kp A  &kp S  &kp D      &kp F        &kp G                 &kp LEFT  &kp ENTER  &kp RIGHT  &kp H          &kp J        &kp K            &kp L    &kp SEMI  &kp SQT
&kp LEFT_WIN  &kp Z  &kp X  &kp C      &kp V        &kp B    &kp SPACE              &kp DOWN              &kp N          &kp M        &kp COMMA        &kp DOT  &kp FSLH  &kp ESC
                            &kp LCTRL  &lt 1 ENTER  &kp TAB                                               &kp BACKSPACE  &lt 2 SPACE  &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        raise_layer {
            bindings = <
&kp F1       &kp F2  &kp F3  &kp F4       &kp F5         &kp F6                    &trans          &kp F7    &kp F8          &kp F9        &kp F10    &kp F11  &kp F12
&trans       &trans  &trans  &kp PAGE_UP  &kp PAGE_DOWN  &trans            &trans  &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans   &trans
&bootloader  &trans  &trans  &trans       &trans         &trans  &trans            &trans          &kp DEL   &kp INS         &kp HOME      &kp END    &trans   &kp PRINTSCREEN
                             &trans       &trans         &trans                                    &trans    &trans          &trans
            >;

            label = "NAV_FN";
        };

        lower_layer {
            bindings = <
&trans  &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans                    &trans          &kp UNDERSCORE  &kp AMPERSAND    &kp ASTERISK  &kp PLUS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans  &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans            &trans  &trans  &trans  &kp EQUAL       &kp DOLLAR       &kp PERCENT   &kp GRAVE  &kp LEFT_BRACE        &kp RIGHT_BRACE
&trans  &trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans            &trans          &kp MINUS       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH   &kp LEFT_BRACKET      &kp RIGHT_BRACKET
                                    &trans        &trans        &trans                                    &trans          &trans           &trans
            >;

            label = "NUM_SYM";
        };

        kb_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_CLR_ALL  &trans  &rgb_ug RGB_ON   &rgb_ug RGB_OFF  &trans                    &trans          &rgb_ug RGB_COLOR_HSB(0,0,100)    &rgb_ug RGB_COLOR_HSB(154,48,50)  &trans  &trans  &trans  &sys_reset
&bt BT_SEL 1  &bt BT_CLR      &trans  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &trans            &trans  &trans  &trans  &rgb_ug RGB_COLOR_HSB(184,36,56)  &trans                            &trans  &trans  &trans  &trans
&bt BT_SEL 2  &bt BT_SEL 3    &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans  &trans            &trans          &rgb_ug RGB_COLOR_HSB(354,63,53)  &trans                            &trans  &trans  &trans  &bootloader
                                      &trans           &trans           &trans                                    &trans                            &trans                            &trans
            >;

            label = "KB";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Fn_Mo {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
